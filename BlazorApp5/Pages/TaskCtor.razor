@page "/constructor"

@using Blazor.Extensions
@using Blazor.Extensions.Canvas
@using Blazor.Extensions.Canvas.Canvas2D
@using BlazorInputFile

@inject DBContext DbContext


<div class="instrument_panel">
    <button style="background-color: white;" @onclick="OnPlusClick">
        <img src="/plus.png"/>
    </button>
    <button style="background-color: white;" @onclick="OnMinusClick">
        <img src="/minus.png"/>
    </button>
    <button style="background-color: white;" @onclick="OnOkClick">
        <img src="/ok.png"/>

    </button>
    <button style="background-color: white;" @onclick="OnCancelClick">
        <img src="/cancel.png"/>
    </button>

    <select class="color_pick" @bind="curent_rect_color">
        <option value="Black">Black</option>
        <option value="Red">Red</option>
        <option value="Green">Green</option>
        <option value="Blue">Blue</option>
        <option value="Yellow">Yellow</option>
        <option value="White">White</option>
        <option value="Orange">Orange</option>
        <option value="Purple">Purple</option>
    </select>
</div>

<div @onmouseup="OnMouseUp" @onmousedown="OnMouseDown">
    <BECanvas Width="1100" Height="700" @ref="canvas"/>
</div>
<BlazorInputFile.InputFile OnChange="OnChange"/>
<img hidden src="@imageDataUri" @ref="img"/>

@if (onCancelConfirm)
{
    <ModalPageConfirm Title="Confirm page" Text="Are you sure, you want to delete all the data you have made?" OnYes="@OnCancelYes" OnNo="@OnCancelNo"/>
}

@if (onMinusConfirm)
{
    <ModalPageConfirm Title="Confirm page" Text="Are you sure, you want to delete last selected rectangle?" OnYes="@OnMinusYes" OnNo="@OnMinusNo"/>
}

@if (onSave)
{
    <ModalPageSave saveModel="@saveModel" OnNo="@OnSaveNo" OnYes="@OnSaveYes"/>
}

@code {
    private ElementReference img;
    protected BECanvasComponent canvas;
    private Canvas2DContext context;
    private string imageDataUri, status, text, curent_rect_color = "Black";
    private double startX, endX, startY, endY;
    private List<Rect> rects = new List<Rect>();
    private bool changed = true, can_add = false, onCancelConfirm = false, onMinusConfirm = false, onSave = false;
    private List<Tasks> tasks = new List<Tasks>();
    private Data.SaveModel saveModel = new Data.SaveModel();

    private void OnMinusActions()
    {
        if (rects.Count != 0) { 
            rects.RemoveAt(rects.Count - 1); 
        }
    }
    private void OnMinusClick()
    {
        onMinusConfirm = true;
    }
    private void OnPlusClick()
    {
        can_add = true;
    }
    private void OnOkActions()
    {
        int idIm = DbContext.images.Count();
        Image im = new Image()
            {
                Id = idIm + 1,
                Description = imageDataUri,
            };
        Problems problems = new Problems()
            {
                Name = saveModel.Name,
                Subject = saveModel.Subject,
                Topic = saveModel.Topic,
                Grade = saveModel.Grade,
                Complexity = saveModel.Complexity,
                ImageId = im.Id,
            };
        DbContext.problems.Add(problems);
        DbContext.images.Add(im);
        foreach (Tasks task in tasks) task.ImageId = im.Id;
        DbContext.tasks.AddRange(tasks);
        DbContext.SaveChanges();

    }
    private void OnOkClick()
    {
        onSave = true;
    }
    private async void OnCancelActions()
    {
        rects.Clear();
        imageDataUri = string.Empty;
        can_add = false;
        curent_rect_color = "Black";
        tasks.Clear();
        await context.ClearRectAsync(0, 0, 1100, 700);
    }
    private async void OnCancelClick()
    {
        onCancelConfirm = true;
    }
    private void OnMouseUp(MouseEventArgs e)
    {
        if (can_add)
        {
            endX = e.OffsetX;
            endY = e.OffsetY;
            rects.Add(new Rect() { x = startX, y = startY, width = endX - startX, height = endY - startY, color = curent_rect_color });
            can_add = false;
            Tasks ts = new Tasks()
            {
                x1 = startX,
                x2 = endX,
                y1 = startY,
                y2 = endY,
                question = "njkfjsj"
            };
            tasks.Add(ts);
        }
    }
    private void OnMouseDown(MouseEventArgs e)
    {
        if (can_add)
        {
            startX = e.OffsetX;
            startY = e.OffsetY;
        }
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            context = await canvas.CreateCanvas2DAsync();
        }
        await context.ClearRectAsync(0, 0, 1100, 700);
        await context.DrawImageAsync(img, 0, 0);
        try{
            foreach (Rect rc in rects)
            {
                await context.SetLineWidthAsync(2.0f);
                await context.SetStrokeStyleAsync(rc.color);
                await context.StrokeRectAsync(rc.x, rc.y, rc.width, rc.height);
            }
        }
        catch(Exception ex){}


    }

    async Task OnChange(IFileListEntry[] files)
    {
        var rawFile = files.FirstOrDefault();
        if (rawFile != null)
        {
            var format = "image/jpeg";
            var imageFile = await rawFile.ToImageFileAsync(format, 640, 480);
            var ms = new MemoryStream();
            await imageFile.Data.CopyToAsync(ms);
            imageDataUri = $"data:{format};base64,{Convert.ToBase64String(ms.ToArray())}";
            status = $"Finished loading {ms.Length} bytes from {imageFile.Name}";
        }
        rects.Clear();
        changed = true;
    }

    private void OnCancelYes()
    {
        onCancelConfirm = false;
        OnCancelActions();
    }
    private void OnCancelNo()
    {
        onCancelConfirm = false;
    }

    private void OnMinusYes()
    {
        onMinusConfirm = false;
        OnMinusActions();
    }
    private void OnMinusNo()
    {
        onMinusConfirm = false;
    }
    private void OnSaveYes()
    {
        onSave = false;
        OnOkActions();
    }
    private void OnSaveNo()
    {
        onSave = false;
    }
}
}
