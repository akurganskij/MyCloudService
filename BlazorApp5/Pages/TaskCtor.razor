@page "/constructor"

@using Blazor.Extensions
@using Blazor.Extensions.Canvas
@using Blazor.Extensions.Canvas.Canvas2D
@using BlazorInputFile

@inject DBContext DbContext

@using System.Globalization

@inject IStringLocalizer<Shared.ResourceFiles.TaskCtorPage> Loc
@inject HttpClient HttpClient
@inject NavigationManager NavigationManager

@if(done)
{
    <Flyouts style="background-color: green;" Title="Loc" />
}
else{
    <Flyouts style="background-color: yellow; color: black;" Title="Loc" Text="Loc"/>
}

<div class="instrument_panel">
    <button class="button" @onclick="OnPlusClick">
        <div class="button-div">
            <img class="button-content" src="/plus.png"/>
            <p class="button-content">@Loc["Add"]</p>
        </div>
    </button>
    <button class="button" @onclick="OnMinusClick">
        <div class="button-div">
            <img class="button-content" src="/minus.png"/>
            <p class="button-content">@Loc["Undo"]</p>
        </div>
    </button>
    <button class="button" @onclick="OnOkClick">
        <div class="button-div">
            <img class="button-content" src="/ok.png"/>
            <p class="button-content">@Loc["Save"]</p>
        </div>
    </button>
    <button class="button" @onclick="OnCancelClick">
        <div class="button-div">
            <img class="button-content" src="/cancel.png"/>
            <p class="button-content">@Loc["Discard"]</p>
        </div>
    </button>
    <button class="button" @onclick="OnEditClick">
        <div class="button-div">
            <img class="button-content" src="/editQuestions.png"/>
            <p class="button-content">@Loc["Edit"]</p>
        </div>
    </button>
    <label class="upload-file" for="fileInput">@Loc["Upload"]</label>
    <select class="color_pick" @bind="curent_rect_color">
        <option value="Black">&#11035;@Loc["Black"]</option>
        <option value="Red">&#128997;@Loc["Red"]</option>
        <option value="Green">&#129001;@Loc["Green"]</option>
        <option value="Blue">&#128998;@Loc["Blue"]</option>
        <option value="Yellow">&#129000;@Loc["Yellow"]</option>
        <option value="White">&#11036;@Loc["White"]</option>
        <option value="Orange">&#128999;@Loc["Orange"]</option>
        <option value="Purple">&#129002;@Loc["Purple"]</option>
    </select>
</div>

<div @onmouseup="OnMouseUp" @onmousedown="OnMouseDown" @onmousemove="OnMouseMove">
    <BECanvas Width="1100" Height="700" @ref="canvas"/>
</div>
<div>
    <BlazorInputFile.InputFile id="fileInput" OnChange="OnChange" hidden/>
</div>

<img hidden src="@imageDataUri" @ref="img"/>

@if (onCancelConfirm)
{
    <ModalPageConfirm Title="@Loc["DiscardTitle"]" Text="@Loc["DiscardText"]" OnYes="@OnCancelYes" OnNo="@OnCancelNo"/>
}

@if (onMinusConfirm)
{
    <ModalPageConfirm Title="@Loc["UndoTitle"]" Text="@Loc["UndoText"]" OnYes="@OnMinusYes" OnNo="@OnMinusNo"/>
}

@if (onSave)
{
    <ModalPageSave saveModel="@saveModel" OnNo="@OnSaveNo" OnYes="@OnSaveYes" Title="@Loc["SaveTitle"]" Text="@Loc["SaveText"]"/>
}
@if (questionDialog)
{
    <AddQuestionModalPage Question="@questions" OnOk="@OnQuestionOk" Title="@Loc["NewQuestionTitle"]" Text="@Loc["NewQuestionText"]"/>
}
@if (editpage)
{
    <EditTaskQuestions tasks="@tasks" OnYes="@OnEditYes"/>
}
@code {
    private ElementReference img;
    protected BECanvasComponent canvas;
    private Canvas2DContext context;
    private string imageDataUri, status, text, curent_rect_color = "Black";
    private Data.Questions questions = new Data.Questions();
    private double startX, endX, startY, endY;
    private List<Rect> rects = new List<Rect>();
    private bool done = false, changedDraw = false, down = false, changed = true, can_add = false, onCancelConfirm = false, onMinusConfirm = false, onSave = false, questionDialog = false, editpage = false;
    private List<Tasks> tasks = new List<Tasks>();
    private Data.SaveModel saveModel = new Data.SaveModel();

    private void OnMinusActions()
    {
        if (rects.Count != 0) { 
            rects.RemoveAt(rects.Count - 1); 
            tasks.RemoveAt(tasks.Count - 1);
        }
    }
    private void OnMinusClick()
    {
        onMinusConfirm = true;
    }
    private void OnPlusClick()
    {
        can_add = true;
    }
    private async void OnOkActions()
    {
        int probId = 0, idIm = 0;
        var p = await HttpClient.GetFromJsonAsync<List<Problems>>(NavigationManager.BaseUri + $"api/problems");
        if (p is not null) probId = p.Count;
        var i = await HttpClient.GetFromJsonAsync<List<Image>>(NavigationManager.BaseUri + $"api/images");
        if (i is not null) idIm = i.Count;
        Image im = new Image()
            {
                Id = idIm + 1,
                Description = imageDataUri,
                ProblemId = probId + 1,
            };
        Problems problems = new Problems()
            {
                Id = probId + 1,
                Name = saveModel.Name,
                Subject = saveModel.Subject,
                Topic = saveModel.Topic,
                Grade = saveModel.Grade,
                Complexity = saveModel.Complexity,
                Randomise = saveModel.Randomise,
                EnableTimer = saveModel.EnableTimer,
                TimerDuration = saveModel.TimerDuration,
                LimitAttempts = saveModel.LimitAttempts,
                MaxAttempts = saveModel.MaxAttempts,
                ImageId = im.Id,
            };
        await HttpClient.PostAsJsonAsync<Problems>(NavigationManager.BaseUri + "api/problems", problems);
        await HttpClient.PostAsJsonAsync<Image>(NavigationManager.BaseUri + "api/images", im);
        foreach (Tasks task in tasks) task.ImageId = im.Id;
        await HttpClient.PostAsJsonAsync<List<Tasks>>(NavigationManager.BaseUri + "api/tasks", tasks);
        done = true;

    }
    private void OnOkClick()
    {
        onSave = true;
    }
    private async void OnCancelActions()
    {
        rects.Clear();
        imageDataUri = string.Empty;
        can_add = false;
        curent_rect_color = "Black";
        tasks.Clear();
        await context.ClearRectAsync(0, 0, 1100, 700);
    }
    private async void OnCancelClick()
    {
        onCancelConfirm = true;
    }
    private void OnMouseUp(MouseEventArgs e)
    {
        if (can_add)
        {
            endX = e.OffsetX;
            endY = e.OffsetY;
            rects.Add(new Rect() { x = startX, y = startY, width = endX - startX, height = endY - startY, color = curent_rect_color });
            can_add = false;
            down = false;
            questionDialog = true;
            changedDraw = true;
        }
    }
    private async void OnMouseMove(MouseEventArgs e)
    {
        if(e.Button == 0 && down)
        {
            await context.ClearRectAsync(0, 0, 1100, 700);
            await context.DrawImageAsync(img, 0, 0);
            endX = e.OffsetX;
            endY = e.OffsetY;
            Rect rc = new Rect() { x = startX, y = startY, width = endX - startX, height = endY - startY, color = curent_rect_color };
            await context.SetLineWidthAsync(2.0f);
            await context.SetStrokeStyleAsync(rc.color);
            await context.StrokeRectAsync(rc.x, rc.y, rc.width, rc.height);
        }
    }
    private void OnMouseDown(MouseEventArgs e)
    {
        if (can_add)
        {
            startX = e.OffsetX;
            startY = e.OffsetY;
            down = true;
        }
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            context = await canvas.CreateCanvas2DAsync();
        }
        if (changedDraw)
        {
            await context.ClearRectAsync(0, 0, 1100, 700);
            await context.DrawImageAsync(img, 0, 0);
            try
            {
                foreach (Rect rc in rects)
                {
                    await context.SetLineWidthAsync(2.0f);
                    await context.SetStrokeStyleAsync(rc.color);
                    await context.StrokeRectAsync(rc.x, rc.y, rc.width, rc.height);
                }
            }
            catch (Exception ex) { }
            changedDraw = false;
        }
    }

    async Task OnChange(IFileListEntry[] files)
    {
        var rawFile = files.FirstOrDefault();
        if (rawFile != null)
        {
            var format = "image/jpeg";
            var imageFile = await rawFile.ToImageFileAsync(format, 640, 480);
            var ms = new MemoryStream();
            await imageFile.Data.CopyToAsync(ms);
            imageDataUri = $"data:{format};base64,{Convert.ToBase64String(ms.ToArray())}";
            status = $"Finished loading {ms.Length} bytes from {imageFile.Name}";
        }
        rects.Clear();
        changed = true;
        changedDraw = true;
    }

    private void OnCancelYes()
    {
        onCancelConfirm = false;
        OnCancelActions();
    }
    private void OnCancelNo()
    {
        onCancelConfirm = false;
    }

    private void OnMinusYes()
    {
        onMinusConfirm = false;
        changedDraw = true;
        OnMinusActions();
    }
    private void OnMinusNo()
    {
        onMinusConfirm = false;
    }
    private void OnSaveYes()
    {
        if(String.IsNullOrWhiteSpace(saveModel.Name)) return;
        if(String.IsNullOrWhiteSpace(saveModel.Subject)) return;
        if(String.IsNullOrWhiteSpace(saveModel.Topic)) return;
        if(String.IsNullOrWhiteSpace(saveModel.Grade)) return;
        onSave = false;
        OnOkActions();
        OnCancelActions();
    }
    private void OnSaveNo()
    {
        onSave = false;
    }
    private void OnQuestionOk()
    {
        questionDialog = false;
        Tasks ts = new Tasks()
            {
                x1 = startX,
                x2 = endX,
                y1 = startY,
                y2 = endY,
                question = questions.Question,
            };
        tasks.Add(ts);
        changedDraw = true;
        questions.Question = String.Empty;
    }
    private void OnEditClick()
    {
        editpage = true;
    }
    private void OnEditYes()
    {
        editpage = false;
        changedDraw = true;
    }
    private void OnEditNo()
    {
        editpage = false;
    }
}