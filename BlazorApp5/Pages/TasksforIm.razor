@page "/task/{ProblemId:int}"
@inject DBContext DbContext
@inject NavigationManager Nav
@using System.Globalization

@inject IStringLocalizer<Shared.ResourceFiles.TaskForImPage> Loc

@if (misclick) 
{
    <Flyouts style="background-color: red;" Title="@Loc["Wrong"]" />
}
else if(correct)
{
    <Flyouts style="background-color: green;" Title="@Loc["Correct"]" />
}
else{
    <Flyouts style="background-color: yellow; color: black;" Title="@Loc["UseTitle"]" Text="@Loc["UseText"]"/>
}
@if (problems.EnableTimer)
{
    <div style="width: 100%; height: 20px; background-color: lightgray;">
        <div style="@styleTimer">

        </div>
    </div>
}

<table style="display: table; width:100%;">
    <tr>
        <td width="22%">      
            <button class="next-question" @onclick="OnNextClick">@Loc["SkipBtn"]</button> 
        </td>
        <td width="22%">
    @if (correct || (timeOver && problems.EnableTimer) || clickOver)
    {
        <button class="next-question" @onclick="OnNextClick">@Loc["NextBtn"]</button>
    }   
    </td>
        
    <td>
    @if (problems.EnableTimer)
    {
        <label class="countdown">@timeLeft</label>
    }
    </td>
<td width="35%"><label class="quest-num">@(tasknum+1) / @tasks.Count</label></td>
</tr>
</table>

@if (showQuestion)
{
    <h3>@tasks[tasknum].question</h3>
}
<div @onclick="OnImageClick">
    <img src="@image.Description"/>
</div>



@if (complete)
{
    <TaskCompleteModalPage total="@tasks.Count" correct="correctAmount" Title="@Loc["Congrats"]" Text="@Loc["CongratsText"]"/>
}
@code {
    [Parameter]
    public int? ProblemId { get; set; }

    private int tasknum = 0, correctAmount = 0, clicked = 0, timeLeft = 0;
    private bool correct = false, complete = false, showQuestion = true, timeOver = false, clickOver = false, misclick = false;

    private Problems problems;
    private Image image;
    private List<Tasks> tasks;

    private int time = 0;
    private static System.Timers.Timer aTimer;
    private string styleTimer = "width: 0%; background-color: lightgreen; height: 18px;";

    protected override void OnInitialized()
    {
        problems = DbContext.problems.Find(ProblemId);
        image = DbContext.images.Find(problems.ImageId);
        tasks = DbContext.tasks.Where(i => i.ImageId == image.Id).ToList();
        if (problems.Randomise)
        {
            Shuffle();
        }

        aTimer = new System.Timers.Timer(1000);
        if (problems.EnableTimer)
        {
            timeLeft = problems.TimerDuration;
            aTimer.Elapsed += OnTimerFinished;
            aTimer.Enabled = true;
        }
    }
    private void OnTimerFinished(Object source, System.Timers.ElapsedEventArgs e)
    {
        if (time < problems.TimerDuration)
        {
            timeLeft--;
            time += 1;
            int i = 100 * time / problems.TimerDuration;
            styleTimer = $"width: {i}%; background-color: lightgreen; height: 18px;";
        }
        else
        {
            timeOver = true;
            aTimer.Enabled = false;
            time = 0;
        }
        InvokeAsync(StateHasChanged);
    }
    private void OnImageClick(MouseEventArgs e)
    {
        ++clicked;
        double x, y;
        x = e.OffsetX;
        y = e.OffsetY;
        if((clicked <= problems.MaxAttempts || !problems.LimitAttempts))
        {
            if (x > Math.Min(tasks[tasknum].x2, tasks[tasknum].x1) && x < Math.Max(tasks[tasknum].x2, tasks[tasknum].x1) &&
                y < Math.Max(tasks[tasknum].y1, tasks[tasknum].y2) && y > Math.Min(tasks[tasknum].y1, tasks[tasknum].y2)) {
                correct = true;
                aTimer.Enabled = false;
                time = 0;
                styleTimer = "width: 0%; background-color: lightgreen; height: 18px;";
            }
        }
        if(clicked > problems.MaxAttempts && problems.LimitAttempts)
        {
            styleTimer = "width: 0%; background-color: lightgreen; height: 18px;";
            clickOver = true;
        }
        if (correct && (!timeOver || !problems.EnableTimer)) correctAmount++;
        if (!correct) misclick = true;
        else
        {
            misclick = false;
        }
    }
    private void OnNextClick()
    {
        if (tasknum < tasks.Count)
        {           
            timeLeft = problems.TimerDuration;
            ++tasknum;
            correct = false;
            if (tasknum == tasks.Count) {
                showQuestion = false;
                --tasknum;
                complete = true;
            }
            timeOver = false;
            time = 0;
            aTimer.Enabled = true;
            clicked = 0;
            clickOver = false;
            misclick = false;
        }
    }

    public void Shuffle()  
    {
        Random rnd = new Random();
        int n = tasks.Count;  
        while (n > 1) {  
            n--;  
            int k = rnd.Next(n + 1);  
            Tasks value = tasks[k];  
            tasks[k] = tasks[n];  
            tasks[n] = value;  
        }  
    }
}