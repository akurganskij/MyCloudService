@page "/task/{ProblemId:int}"
@inject DBContext DbContext
@inject NavigationManager Nav

@if (problems.EnableTimer)
{
    <div style="width: 100%; height: 20px; background-color: lightgray;">
        <div style="@styleTimer">

        </div>
    </div>
}

@if (showQuestion)
{
    <h3>@tasks[tasknum].question</h3>
}
<div @onclick="OnImageClick">
    <img src="@image.Description"/>
</div>

@if (correct || (timeOver && problems.EnableTimer) || clickOver)
{
    <button @onclick="OnNextClick">Next question</button>
}

@if (complete)
{
    <TaskCompleteModalPage total="@tasks.Count" correct="correctAmount" Title="Congratulations!" Text="You've finished this task!"/>
}
@code {
    [Parameter]
    public int? ProblemId { get; set; }

    private int tasknum = 0, correctAmount = 0, clicked = 0;
    private bool correct = false, complete = false, showQuestion = true, timeOver = false, clickOver = false;

    private Problems problems;
    private Image image;
    private List<Tasks> tasks;

    private int time = 0;
    private static System.Timers.Timer aTimer;
    private string styleTimer = "width: 0%; background-color: lightgreen; height: 18px;";

    protected override void OnInitialized()
    {
        problems = DbContext.problems.Find(ProblemId);
        image = DbContext.images.Find(problems.ImageId);
        tasks = DbContext.tasks.Where(i => i.ImageId == image.Id).ToList();
        if (problems.Randomise)
        {
            Shuffle();
        }
        aTimer = new System.Timers.Timer(500);
        if (problems.EnableTimer)
        {            
            aTimer.Elapsed += OnTimerFinished;
            aTimer.Enabled = true;
        }
    }
    private void OnTimerFinished(Object source, System.Timers.ElapsedEventArgs e)
    {
        if (time < problems.TimerDuration)
        {
            time += 1;
            int i = 100 * time / problems.TimerDuration;
            styleTimer = $"width: {i}%; background-color: lightgreen; height: 18px;";
        }
        else
        {
            timeOver = true;
            aTimer.Enabled = false;
            time = 0;
        }
        InvokeAsync(StateHasChanged);
    }
    private void OnImageClick(MouseEventArgs e)
    {
        ++clicked;
        double x, y;
        x = e.OffsetX;
        y = e.OffsetY;
        if(tasks[tasknum].x1 > tasks[tasknum].x2 && clicked <= problems.MaxAttempts)
        {
            if (x > tasks[tasknum].x2 && x < tasks[tasknum].x1) {
                correct = true;
                aTimer.Enabled = false;
                time = 0;
                styleTimer = "width: 0%; background-color: lightgreen; height: 18px;";
            }
        }
        else
        {
            if (x < tasks[tasknum].x2 && x > tasks[tasknum].x1) {
                correct = true;
                aTimer.Enabled = false;
                time = 0;
                styleTimer = "width: 0%; background-color: lightgreen; height: 18px;";
            }
        }
        if(clicked > problems.MaxAttempts)
        {
            styleTimer = "width: 0%; background-color: lightgreen; height: 18px;";
            clickOver = true;
        }
        if (correct && (!timeOver || !problems.EnableTimer)) correctAmount++;
    }
    private void OnNextClick()
    {
        if (tasknum < tasks.Count)
        {            
            ++tasknum;
            correct = false;
            if (tasknum == tasks.Count) {
                showQuestion = false;
                tasknum = 0;
                complete = true;
            }
            timeOver = false;
            time = 0;
            aTimer.Enabled = true;
            clicked = 0;
            clickOver = false;
        }
    }

    public void Shuffle()  
    {
        Random rnd = new Random();
        int n = tasks.Count;  
        while (n > 1) {  
            n--;  
            int k = rnd.Next(n + 1);  
            Tasks value = tasks[k];  
            tasks[k] = tasks[n];  
            tasks[n] = value;  
        }  
    }
}